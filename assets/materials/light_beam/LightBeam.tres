[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://assets/materials/light_beam/beam2.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_add, unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float proximity_fade_distance = 1.0;

vec3 project_on_plane( vec3 vec, vec3 normal ) {
    return vec - normal * dot( vec, normal );
}

vec3 rotate (vec3 v, vec3 n, float a) {
    return v * cos(a) + cross(n, v) * sin(a) + n * dot(n, v) * (1. - cos(a));
}

void vertex() {
	vec3 obj_pos = (WORLD_MATRIX * vec4(0, 0, 0, 1)).xyz;
    vec3 world_camera = (CAMERA_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    vec3 c = world_camera - obj_pos;
    c = normalize(c);
    c = (vec4(c, 0.0) * WORLD_MATRIX).xyz;
    vec3 axis = vec3(0, 1, 0);
    vec3 target = project_on_plane(c, axis);
    target = normalize(target);
    float dot_product = dot(target, NORMAL);
    float angle = acos( dot_product);
    if (target.x < 0.0) {
        angle = -angle;
    }
    VERTEX = rotate(VERTEX, axis, angle);
    NORMAL = rotate(NORMAL, axis, angle);
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = albedo.a * albedo_tex.a;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.694118, 0.737255, 1, 0.0235294 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/proximity_fade_distance = 1.0
shader_param/texture_albedo = ExtResource( 1 )
